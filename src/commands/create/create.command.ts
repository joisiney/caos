import { Command } from 'commander';
import chalk from 'chalk';
import { SmartCreateCommand } from './smart-create.command';

export class CreateCommand {
  createCommand(): Command {
    const command = new Command('create')
      .description('Criar componentes da arquitetura Khaos')
      .option('--smart', 'Usar IA para cria√ß√£o inteligente')
      .action(async (options) => {
        if (options.smart) {
          // Redirecionar para smart create
          const smartCommand = new SmartCreateCommand();
          await smartCommand.createCommand().parseAsync(process.argv);
        } else {
          // Modo manual (implementar depois)
          await this.executeManual(options);
        }
      });

    // Adicionar subcomando smart
    const smartCommand = new SmartCreateCommand();
    command.addCommand(smartCommand.createCommand());

    // Adicionar outros subcomandos manuais (para implementar depois)
    command
      .command('atom <name>')
      .description('Criar um √°tomo manualmente')
      .action(async (name) => {
        console.log(chalk.yellow(`‚ö†Ô∏è  Cria√ß√£o manual de √°tomos ser√° implementada em Sprint 1`));
        console.log(chalk.blue(`üí° Por enquanto, use: khaos create smart "√°tomo ${name}"`));
      });

    command
      .command('molecule <name>')
      .description('Criar uma mol√©cula manualmente')
      .action(async (name) => {
        console.log(chalk.yellow(`‚ö†Ô∏è  Cria√ß√£o manual de mol√©culas ser√° implementada em Sprint 1`));
        console.log(chalk.blue(`üí° Por enquanto, use: khaos create smart "mol√©cula ${name}"`));
      });

    command
      .command('organism <name>')
      .description('Criar um organismo manualmente')
      .action(async (name) => {
        console.log(chalk.yellow(`‚ö†Ô∏è  Cria√ß√£o manual de organismos ser√° implementada em Sprint 1`));
        console.log(chalk.blue(`üí° Por enquanto, use: khaos create smart "organismo ${name}"`));
      });

    command
      .command('template <name>')
      .description('Criar um template manualmente')
      .action(async (name) => {
        console.log(chalk.yellow(`‚ö†Ô∏è  Cria√ß√£o manual de templates ser√° implementada em Sprint 1`));
        console.log(chalk.blue(`üí° Por enquanto, use: khaos create smart "template ${name}"`));
      });

    command
      .command('feature <name>')
      .description('Criar uma feature manualmente')
      .action(async (name) => {
        console.log(chalk.yellow(`‚ö†Ô∏è  Cria√ß√£o manual de features ser√° implementada em Sprint 1`));
        console.log(chalk.blue(`üí° Por enquanto, use: khaos create smart "feature ${name}"`));
      });

    return command;
  }

  private async executeManual(options: any): Promise<void> {
    console.log(chalk.blue.bold('\nüèóÔ∏è  Khaos Create - Modo Manual\n'));
    console.log(chalk.yellow('‚ö†Ô∏è  Modo manual ser√° implementado em Sprint 1'));
    console.log(chalk.blue('\nüí° Op√ß√µes dispon√≠veis agora:'));
    console.log(chalk.blue('   ‚Ä¢ khaos create smart - Cria√ß√£o com IA'));
    console.log(chalk.blue('   ‚Ä¢ khaos create smart "descri√ß√£o do componente"'));
    console.log(chalk.blue('   ‚Ä¢ khaos create smart --help - Ver todas as op√ß√µes\n'));
  }

  // M√©todo para integra√ß√£o com o CLI principal
  static register(program: Command): void {
    const createCommand = new CreateCommand();
    program.addCommand(createCommand.createCommand());
  }
} 