import inquirer from 'inquirer';
import fs from 'fs-extra';
import path from 'path';
import { execSync } from 'child_process';

/**
 * Fluxo completo de remo√ß√£o de √°tomos baseado no atom.md
 * 3 Passos: Listar ‚Üí Visualizar ‚Üí Confirmar
 */
export async function deleteAtom() {
  console.log('üóëÔ∏è  Removendo √°tomo Khaos...\n');

  try {
    // PASSO 1: Listar √°tomos existentes
    const existingAtoms = await getExistingAtoms();
    
    if (existingAtoms.length === 0) {
      console.log('‚ùå Nenhum √°tomo encontrado em src/atoms/');
      console.log('üí° Crie um √°tomo primeiro com: khaos atom');
      return;
    }

    const { selectedAtom } = await inquirer.prompt([
      {
        type: 'list',
        name: 'selectedAtom',
        message: 'üéØ Selecione um √°tomo para remover:',
        choices: existingAtoms.map(atom => ({
          name: `${atom} (${getAtomFilesCount(atom)} arquivos)`,
          value: atom,
          short: atom
        }))
      },
    ]);

    // PASSO 2: Visualizar √°rvore de arquivos que ser√° removida
    console.log('\nüìÅ Arquivos que ser√£o removidos:');
    await displayAtomDeletionTree(selectedAtom);

    // PASSO 3: Confirmar remo√ß√£o e commit
    const { confirm } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'confirm',
        message: `‚ö†Ô∏è  Confirmar remo√ß√£o do √°tomo "${selectedAtom}"? (Esta a√ß√£o n√£o pode ser desfeita)`,
        default: false,
      },
    ]);

    if (!confirm) {
      console.log('‚ùå Opera√ß√£o cancelada.');
      return;
    }

    // Remover √°tomo
    await removeAtomFiles(selectedAtom);
    
    // Commit autom√°tico
    await performAutoCommit(selectedAtom);
    
    console.log(`\nüéâ √Åtomo "${selectedAtom}" removido com sucesso!`);
    console.log(`üí° Commit autom√°tico: chore: remove ${selectedAtom} atom`);

  } catch (error: any) {
    console.error('‚ùå Erro:', error.message);
    process.exit(1);
  }
}

/**
 * Lista todos os √°tomos existentes no diret√≥rio src/atoms/
 */
async function getExistingAtoms(): Promise<string[]> {
  const atomsDir = path.join(process.cwd(), 'src/atoms');
  
  try {
    if (!await fs.pathExists(atomsDir)) {
      return [];
    }

    const items = await fs.readdir(atomsDir);
    const atoms: string[] = [];

    for (const item of items) {
      const itemPath = path.join(atomsDir, item);
      const stat = await fs.stat(itemPath);
      
      if (stat.isDirectory()) {
        // Verifica se √© um √°tomo v√°lido (tem index.ts e .atom.tsx)
        const indexPath = path.join(itemPath, 'index.ts');
        const atomPath = path.join(itemPath, `${item}.atom.tsx`);
        
        if (await fs.pathExists(indexPath) && await fs.pathExists(atomPath)) {
          atoms.push(item);
        }
      }
    }

    return atoms.sort();
  } catch (error) {
    return [];
  }
}

/**
 * Conta quantos arquivos o √°tomo possui
 */
function getAtomFilesCount(atomName: string): number {
  const atomDir = path.join(process.cwd(), 'src/atoms', atomName);
  
  try {
    const files = fs.readdirSync(atomDir);
    return files.length;
  } catch (error) {
    return 0;
  }
}

/**
 * Exibe a √°rvore de arquivos que ser√° removida
 */
async function displayAtomDeletionTree(atomName: string) {
  const atomDir = path.join(process.cwd(), 'src/atoms', atomName);
  
  try {
    const files = await fs.readdir(atomDir);
    const sortedFiles = files.sort();
    
    console.log(`src/atoms/`);
    console.log(`‚îú‚îÄ‚îÄ ${atomName}/`);
    
    sortedFiles.forEach((file, index) => {
      const isLast = index === sortedFiles.length - 1;
      const connector = isLast ? '‚îî‚îÄ‚îÄ' : '‚îú‚îÄ‚îÄ';
      console.log(`‚îÇ   ${connector} ${file}`);
    });
    
    console.log('');
  } catch (error) {
    console.log('‚ùå Erro ao ler arquivos do √°tomo');
  }
}

/**
 * Remove todos os arquivos do √°tomo
 */
async function removeAtomFiles(atomName: string) {
  const atomDir = path.join(process.cwd(), 'src/atoms', atomName);
  
  try {
    await fs.remove(atomDir);
    console.log(`‚úÖ Diret√≥rio removido: src/atoms/${atomName}/`);
  } catch (error: any) {
    throw new Error(`Erro ao remover √°tomo: ${error.message}`);
  }
}

/**
 * Realiza commit autom√°tico seguindo Conventional Commits
 */
async function performAutoCommit(atomName: string) {
  try {
    // Verifica se est√° em um reposit√≥rio git
    execSync('git rev-parse --git-dir', { stdio: 'ignore' });
    
    // Add e commit
    execSync('git add .', { stdio: 'ignore' });
    execSync(`git commit -m "chore: remove ${atomName} atom"`, { stdio: 'ignore' });
    
    console.log('üìù Commit autom√°tico realizado');
  } catch (error) {
    console.log('‚ö†Ô∏è  Commit autom√°tico falhou (n√£o √© um reposit√≥rio git ou sem mudan√ßas)');
  }
} 