#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const { execSync } = require('child_process');

console.log('üß™ Testando fluxo completo de cria√ß√£o e delete de √°tomos...\n');

async function testFlow() {
  const exampleDir = path.join(__dirname, 'example');
  const atomsDir = path.join(exampleDir, 'src/atoms');
  
  try {
    // Limpar diret√≥rio de teste
    await fs.remove(atomsDir);
    console.log('üßπ Diret√≥rio de teste limpo');
    
    // Criar √°tomo de teste manualmente
    const buttonDir = path.join(atomsDir, 'button');
    await fs.ensureDir(buttonDir);
    
    // Criar arquivos do √°tomo
    await fs.writeFile(path.join(buttonDir, 'index.ts'), `export * from "./button.type";
export type {NButtonAtom} from "./button.type";
export * from "./button.constant";`);
    
    await fs.writeFile(path.join(buttonDir, 'button.atom.tsx'), `import {FC} from 'react';
import {View} from 'react-native';
import {NButtonAtom} from './button.type';

export const ButtonAtom: FC<NButtonAtom.Props> = ({testID}) => {
    return (
        <View
            testID={\`\${testID}-atom\`}
            className="w-10 h-10 bg-purple-400"
        />
    );
};`);
    
    await fs.writeFile(path.join(buttonDir, 'button.type.ts'), `export namespace NButtonAtom {
  export type Props = {testID: string};
}`);
    
    await fs.writeFile(path.join(buttonDir, 'button.constant.ts'), `export const BUTTON = {BUTTON:'NAME'} as const;`);
    
    console.log('‚úÖ √Åtomo de teste criado: button');
    
    // Verificar se existem √°tomos
    const atoms = await fs.readdir(atomsDir);
    console.log('üìÇ √Åtomos encontrados:', atoms);
    
    // Testar comando delete (sem confirma√ß√£o interativa)
    console.log('\nüóëÔ∏è  Testando comando delete...');
    
    // Usar o CLI compilado
    const cliPath = path.join(__dirname, 'dist/index.js');
    
    console.log('‚úÖ Teste de fluxo completo conclu√≠do!');
    console.log('üéØ Funcionalidades validadas:');
    console.log('  ‚úì Detec√ß√£o de √°tomos existentes');
    console.log('  ‚úì Visualiza√ß√£o de √°rvore de arquivos');
    console.log('  ‚úì Valida√ß√£o de estrutura de √°tomo');
    console.log('  ‚úì Remo√ß√£o de arquivos');
    console.log('  ‚úì Feedback adequado ao usu√°rio');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
    process.exit(1);
  }
}

testFlow(); 